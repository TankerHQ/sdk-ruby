include:
  project: TankerHQ/gitlab-ci-files
  file: /common.yml
  ref: 2022-09-05-258

variables:
  SDK_NATIVE_CONAN_REFERENCE: tanker/latest-stable@
  RUBY_3_2: 3.2.1
  RUBY_3_1: 3.1.3
  RUBY_3_0: 3.0.5
  RUBY_2_7: 2.7.7
  PROFILE_LINUX: --profile linux-x86_64 shared no-http-backend
  PROFILE_MAC_X86: --profile macos-x86_64 shared no-http-backend
  PROFILE_MAC_ARM: --profile macos-armv8 shared no-http-backend
  RBENV_VERSION: $RUBY_3_2


############
# Workflow #
############

workflow:
  rules:
    # web pipelines for releases only
    - if: $CI_PIPELINE_SOURCE == "web" && $SDK_RUBY_RELEASE_VERSION !~ /\A\d+\.\d+\.\d+(\.(alpha|beta)\.\d+)?\z/
      when: never
    - if: !reference [.if-invalid-native-conan-reference, if]
      when: never
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*\[preview].*/'
      variables:
        CONAN_REMOTE: "artifactory-preview"
    - when: always
      variables:
        CONAN_REMOTE: "artifactory"


###########
# Default #
###########

default:
  before_script:
    - poetry -V
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python --version
  image: registry.gitlab.com/tankerhq/docker/sdk-ruby:latest

##########
# Stages #
##########

stages:
  - lint
  - prepare
  - check
  - deploy

#############################
# Default settings override #
#############################

.before-script/download-artifacts:
  before_script:
    - poetry -V
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python --version
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME

.before-script/rbenv-path:
  before_script:
    - poetry -V
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python --version
    - export PATH=$HOME/.rbenv/versions/$RBENV_VERSION/bin:$PATH
    - echo $RBENV_VERSION

.before-script/rbenv-path-download-artifacts:
  before_script:
    - poetry -V
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python --version
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - export PATH=$HOME/.rbenv/versions/$RBENV_VERSION/bin:$PATH
    - echo $RBENV_VERSION

#################
# Extend blocks #
#################

.release-artifacts:
  artifacts:
    paths:
      - vendor/tanker

##############
# lint stage #
##############

# Prevent the pipeline from passing unless the lint job is started manually
# There is no way to require _one of_ the manual checks job,
# it's all blocking or nothing blocks the pipeline. So we require manual lint instead

lint:
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/push-master, rules]
  stage: lint
  extends:
    - .tags/linux
    - .before-script/rbenv-path
  script:
    - poetry run python run-ci.py lint
  tags: !reference [.tags/linux, tags]

#################
# prepare stage #
#################

.rules/prepare:
  rules:
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/deploy-pipeline, rules]

.prepare:
  stage: prepare
  extends:
    - .before-script/rbenv-path
    - .rules/prepare
    - .release-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_CONAN_REFERENCE $TANKER_PROFILES

prepare/linux:
  extends:
    - .prepare
  variables:
    RBENV_VERSION: $RUBY_3_2
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/linux, tags]

prepare/macos/x86_64:
  extends:
    - .tags/macos/x86_64
    - .prepare
  variables:
    TANKER_PROFILES: $PROFILE_MAC_X86

prepare/macos/arm:
  extends:
    - .tags/macos/arm
    - .prepare
  variables:
    TANKER_PROFILES: $PROFILE_MAC_ARM

###############
# check stage #
###############

.check/native-from-sources:
  stage: check
  extends:
    - .rules/native-from-sources
    - .before-script/rbenv-path
  dependencies: []
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE prepare --use-tanker=same-as-branch $TANKER_PROFILES
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE build --test

check/native-from-sources/linux/2.7:
  extends:
    - .check/native-from-sources
  variables:
    RBENV_VERSION: $RUBY_2_7
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/linux/3.0:
  extends:
    - .check/native-from-sources
  variables:
    RBENV_VERSION: $RUBY_3_0
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/linux/3.1:
  extends:
    - .check/native-from-sources
  variables:
    RBENV_VERSION: $RUBY_3_1
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/linux/3.2:
  extends:
    - .check/native-from-sources
  variables:
    RBENV_VERSION: $RUBY_3_2
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/macos/x86_64:
  extends:
    - .tags/macos/x86_64
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: $PROFILE_MAC_X86

check/native-from-sources/macos/arm:
  extends:
    - .tags/macos/arm
    - .check/native-from-sources
  variables:
    TANKER_PROFILES: $PROFILE_MAC_ARM

.rules/check/deployed-native:
  rules:
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/web/auto, rules]

.check/deployed-native:
  stage: check
  extends:
    - .before-script/rbenv-path
    - .rules/check/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE build --test

check/deployed-native/linux/2.7:
  extends:
    - .check/deployed-native
  variables:
    RBENV_VERSION: $RUBY_2_7
    TANKER_PROFILES: $PROFILE_LINUX
  needs:
    - prepare/linux
  tags: !reference [.tags/linux, tags]

check/deployed-native/linux/3.0:
  extends:
    - .check/deployed-native
  variables:
    RBENV_VERSION: $RUBY_3_0
    TANKER_PROFILES: $PROFILE_LINUX
  needs:
    - prepare/linux
  tags: !reference [.tags/linux, tags]

check/deployed-native/linux/3.1:
  extends:
    - .check/deployed-native
  variables:
    RBENV_VERSION: $RUBY_3_1
    TANKER_PROFILES: $PROFILE_LINUX
  needs:
    - prepare/linux
  tags: !reference [.tags/linux, tags]

check/deployed-native/linux/3.2:
  extends:
    - .check/deployed-native
  variables:
    RBENV_VERSION: $RUBY_3_2
    TANKER_PROFILES: $PROFILE_LINUX
  needs:
    - prepare/linux
  tags: !reference [.tags/linux, tags]

check/deployed-native/macos/x86_64:
  extends:
    - .tags/macos/x86_64
    - .check/deployed-native
  variables:
    TANKER_PROFILES: $PROFILE_MAC_X86
  needs:
    - prepare/macos/x86_64

check/deployed-native/macos/arm:
  extends:
    - .tags/macos/arm
    - .check/deployed-native
  variables:
    TANKER_PROFILES: $PROFILE_MAC_ARM
  needs:
    - prepare/macos/arm

.check/downstream:
  stage: check
  extends:
    - .before-script/rbenv-path-download-artifacts
  dependencies: []
  script:
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE prepare --use-tanker=upstream $TANKER_PROFILES
    - poetry run python run-ci.py --isolate-conan-user-home --remote $CONAN_REMOTE build --test

check/downstream/linux/2.7:
  extends:
    - .check/downstream
    - .rules/check/downstream/linux
  variables:
    RBENV_VERSION: $RUBY_2_7
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/linux, tags]

check/downstream/linux/3.0:
  extends:
    - .check/downstream
    - .rules/check/downstream/linux
  variables:
    RBENV_VERSION: $RUBY_3_0
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/linux, tags]

check/downstream/linux/3.1:
  extends:
    - .check/downstream
    - .rules/check/downstream/linux
  variables:
    RBENV_VERSION: $RUBY_3_1
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/linux, tags]

check/downstream/linux/3.2:
  extends:
    - .check/downstream
    - .rules/check/downstream/linux
  variables:
    RBENV_VERSION: $RUBY_3_2
    TANKER_PROFILES: $PROFILE_LINUX
  tags: !reference [.tags/linux, tags]

check/downstream/macos/x86_64:
  extends:
    - .tags/macos/x86_64
    - .check/downstream
    - .rules/check/downstream/macos/x86_64
  variables:
    TANKER_PROFILES: $PROFILE_MAC_X86

check/downstream/macos/arm:
  extends:
    - .tags/macos/arm
    - .check/downstream
    - .rules/check/downstream/macos/arm
  variables:
    RBENV_VERSION: $RUBY_3_2
    TANKER_PROFILES: $PROFILE_MAC_ARM

################
# deploy stage #
################

deploy:
  stage: deploy
  extends:
    - .rules/deploy/ruby
    - .before-script/rbenv-path
  script:
    - poetry run python run-ci.py deploy --version $SDK_RUBY_RELEASE_VERSION
  needs:
    - prepare/linux
    - prepare/macos/x86_64
    - prepare/macos/arm
  release:
    description: sdk-ruby v$SDK_RUBY_RELEASE_VERSION
    tag_name: v$SDK_RUBY_RELEASE_VERSION
  tags: !reference [.tags/linux, tags]
