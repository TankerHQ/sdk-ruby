include:
  project: TankerHQ/gitlab-ci-files
  ref: 2021-10-13-215
  file: /common.yml

############
# Workflow #
############

workflow:
  rules:
    # web pipelines for releases only
    - if: $CI_PIPELINE_SOURCE == "web" && $SDK_RUBY_RELEASE_VERSION !~ /\A\d+\.\d+\.\d+(\.(alpha|beta)\.\d+)?\z/
      when: never
    - if: !reference [.if-invalid-native-conan-reference, if]
      when: never
    # allow everything else
    - when: always

###########
# Default #
###########

default:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
  image: registry.gitlab.com/tankerhq/docker/sdk-ruby:latest

##########
# Stages #
##########

stages:
  - lint
  - build-native
  - check
  - deploy

#############################
# Default settings override #
#############################

.before-script/download-artifacts:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py reset-branch $(cat branch_name.txt)
    - poetry run python -m pip install --upgrade pip
    - poetry install

.before-script/rbenv-path:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - export PATH=$HOME/.rbenv/versions/$RBENV_VERSION/bin:$PATH

.before-script/rbenv-path-download-artifacts:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py reset-branch $(cat branch_name.txt)
    - poetry run python -m pip install --upgrade pip
    - poetry install
    - export PATH=$HOME/.rbenv/versions/$RBENV_VERSION/bin:$PATH

#################
# Extend blocks #
#################

.release-artifacts:
  artifacts:
    paths:
      - vendor/tanker

.check/native-from-sources/linux:
  stage: check
  extends:
    - .tags/linux
    - .rules/native-from-sources
    - .before-script/rbenv-path
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=same-as-branch --profile linux-release-shared
    - poetry run python run-ci.py --isolate-conan-user-home build --test

.check/downstream/linux:
  stage: check
  extends:
    - .tags/linux
    - .rules/check/downstream/linux
    - .before-script/rbenv-path-download-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test

##############
# lint stage #
##############

# Prevent the pipeline from passing unless the lint job is started manually
# There is no way to require _one of_ the manual checks job,
# it's all blocking or nothing blocks the pipeline. So we require manual lint instead

lint:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: false # Block!
  stage: lint
  extends:
    - .tags/linux
    - .before-script/rbenv-path
  variables:
    RBENV_VERSION: 2.7.3
  script:
    - poetry run python run-ci.py lint

######################
# build-native stage #
######################

.rules/build-native:
  rules:
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/deploy-pipeline, rules]

build-native/linux/2.6:
  stage: build-native
  extends:
    - .tags/linux
    - .before-script/rbenv-path
    - .rules/build-native
    - .release-artifacts
  variables:
    RBENV_VERSION: 2.6.7
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile linux-release-shared

build-native/linux/2.7:
  stage: build-native
  extends:
    - .tags/linux
    - .before-script/rbenv-path
    - .rules/build-native
    - .release-artifacts
  variables:
    RBENV_VERSION: 2.7.3
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile linux-release-shared

build-native/linux/3.0:
  stage: build-native
  extends:
    - .tags/linux
    - .before-script/rbenv-path
    - .rules/build-native
    - .release-artifacts
  variables:
    RBENV_VERSION: 3.0.1
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile linux-release-shared

build-native/macos/x86_64/2.7:
  stage: build-native
  extends:
    - .tags/macos/x86_64
    - .rules/build-native
    - .release-artifacts
  variables:
    RBENV_VERSION: 2.7.1
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile macos-x86_64-release-shared

build-native/macos/arm/2.7:
  stage: build-native
  extends:
    - .tags/macos/arm
    - .rules/build-native
    - .release-artifacts
  variables:
    RBENV_VERSION: 2.7.3
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile macos-armv8-release-shared


###############
# check stage #
###############

check/native-from-sources/linux/2.6:
  stage: check
  extends:
    - .tags/linux
    - .check/native-from-sources/linux
  dependencies: []
  variables:
    RBENV_VERSION: 2.6.7

check/native-from-sources/linux/2.7:
  stage: check
  extends:
    - .tags/linux
    - .check/native-from-sources/linux
  dependencies: []
  variables:
    RBENV_VERSION: 2.7.3

check/native-from-sources/linux/3.0:
  stage: check
  extends:
    - .tags/linux
    - .check/native-from-sources/linux
  dependencies: []
  variables:
    RBENV_VERSION: 3.0.1

check/native-from-sources/macos/x86_64/2.7:
  stage: check
  extends:
    - .tags/macos/x86_64
    - .rules/native-from-sources
  dependencies: []
  variables:
    RBENV_VERSION: 2.7.1
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile macos-x86_64-release-shared
    - poetry run python run-ci.py --isolate-conan-user-home build --test

check/native-from-sources/macos/arm/2.7:
  stage: check
  extends:
    - .tags/macos/arm
    - .rules/native-from-sources
  dependencies: []
  variables:
    RBENV_VERSION: 2.7.3
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile macos-armv8-release-shared
    - poetry run python run-ci.py --isolate-conan-user-home build --test

.rules/check/deployed-native:
  rules: !reference [.rules/build-native, rules]

check/deployed-native/linux/2.6:
  stage: check
  extends:
    - .tags/linux
    - .before-script/rbenv-path
    - .rules/check/deployed-native
  variables:
    RBENV_VERSION: 2.6.7
  needs:
    - build-native/linux/2.6
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test

check/deployed-native/linux/2.7:
  stage: check
  extends:
    - .tags/linux
    - .before-script/rbenv-path
    - .rules/check/deployed-native
  variables:
    RBENV_VERSION: 2.7.3
  needs:
    - build-native/linux/2.7
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test

check/deployed-native/linux/3.0:
  stage: check
  extends:
    - .tags/linux
    - .before-script/rbenv-path
    - .rules/check/deployed-native
  variables:
    RBENV_VERSION: 3.0.1
  needs:
    - build-native/linux/3.0
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test

check/deployed-native/macos/x86_64/2.7:
  stage: check
  extends:
    - .tags/macos/x86_64
    - .rules/check/deployed-native
  variables:
    RBENV_VERSION: 2.7.1
  needs:
    - build-native/macos/x86_64/2.7
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test

check/deployed-native/macos/arm/2.7:
  stage: check
  extends:
    - .tags/macos/arm
    - .rules/check/deployed-native
  variables:
    RBENV_VERSION: 2.7.3
  needs:
    - build-native/macos/arm/2.7
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test

check/downstream/linux/2.6:
  extends:
    - .check/downstream/linux
  variables:
    RBENV_VERSION: 2.6.7

check/downstream/linux/2.7:
  extends:
    - .check/downstream/linux
  variables:
    RBENV_VERSION: 2.7.3

check/downstream/linux/3.0:
  extends:
    - .check/downstream/linux
  variables:
    RBENV_VERSION: 3.0.1

check/downstream/macos/x86_64/2.7:
  stage: check
  extends:
    - .tags/macos/x86_64
    - .rules/check/downstream/macos/x86_64
    - .before-script/download-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test
  variables:
    RBENV_VERSION: 2.7.1

check/downstream/macos/arm/2.7:
  stage: check
  extends:
    - .tags/macos/arm
    - .rules/check/downstream/macos/arm
    - .before-script/download-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --test
  variables:
    RBENV_VERSION: 2.7.3

################
# deploy stage #
################

deploy:
  stage: deploy
  extends:
    - .tags/linux
    - .rules/deploy/ruby
    - .before-script/rbenv-path
  script:
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py deploy --version $SDK_RUBY_RELEASE_VERSION
  needs:
    - build-native/linux/3.0
    - build-native/linux/2.7
    - build-native/linux/2.6
    - build-native/macos/x86_64/2.7
    - build-native/macos/arm/2.7
  variables:
    RBENV_VERSION: 2.6.7
  release:
    description: sdk-ruby v$SDK_RUBY_RELEASE_VERSION
    tag_name: v$SDK_RUBY_RELEASE_VERSION
